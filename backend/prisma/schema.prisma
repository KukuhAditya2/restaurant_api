// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  uuid       String   @id @default(uuid())
  name       String   @db.VarChar(100)
  email      String   @unique @db.VarChar(100)
  password   String   @db.VarChar(100)
  role       String   @db.VarChar(100)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  Order      Order[]

  @@map("users")
}

model Category {
  uuid       String    @id @default(uuid())
  name       String    @db.VarChar(100)
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  products   Product[]

  @@map("categories")
}

model Product {
  uuid         String        @id @default(uuid())
  sku          Int?          @db.Int
  name         String        @db.VarChar(100)
  stock        Int           @db.Int
  price        Int           @db.Int
  category_id  String
  created_at   DateTime      @default(now())
  updated_at   DateTime      @updatedAt
  category     Category      @relation(fields: [category_id], references: [uuid])
  orderDetails OrderDetail[]

  @@map("products")
}

model Order {
  uuid            String        @id @default(uuid())
  total_price     Float         @db.Float
  total_paid      Float         @db.Float
  total_kembalian Float         @db.Float
  tanda_terima    String
  userId          String
  paymentId       String?
  created_at      DateTime      @default(now())
  updated_at      DateTime      @updatedAt
  orderDetails    OrderDetail[]
  OrderHistory    OrderHistory?
  user            User          @relation(fields: [userId], references: [uuid])
  payment         Payment?      @relation(fields: [paymentId], references: [uuid])

  @@map("orders")
}

model OrderHistory {
  uuid           String @id @default(uuid())
  totalPrice     Float  @db.Float
  totalPaid      Float  @db.Float
  totalKembalian Float  @db.Float
  status         String @default("belum di bayar") @db.VarChar(100)
  orderId        String @unique
  order          Order  @relation(fields: [orderId], references: [uuid])

  @@map("orders_history")
}

model OrderDetail {
  uuid       String   @id @default(uuid())
  quantity   Int      @db.Int
  orderId    String   @db.VarChar(100)
  productId  String   @db.VarChar(100)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  orders     Order    @relation(fields: [orderId], references: [uuid])
  products   Product  @relation(fields: [productId], references: [uuid])

  @@map("orders_details")
}

model Payment {
  uuid  String  @id @default(uuid())
  name  String
  type  String
  Order Order[]
}

model Session {
  id      String   @id @default(uuid()) @map(name: "id")
  session Json
  expires DateTime
}
